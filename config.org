#+TITLE: Basic Emacs Configuration
#+LANGUAGE: en
#+STARTUP: fold indent
   
#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding:t; -*-
#+end_src
* Load Package Repositories
#+begin_src emacs-lisp :tangle yes
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "http://melpa.org/packages/") ))
  ;; (package-initialize) ;; required for earlier emacs

  ;; Load use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+end_src
** Quelpa
[[https://github.com/quelpa/quelpa][Quelpa]] is an emacs package installer that allows you to directly install from web sources.
[[https://github.com/quelpa/quelpa-use-package][Quelpa-use-package]] is a package that allows use-package to install through quelpa.
#+begin_src emacs-lisp :tangle yes
  (use-package quelpa
    :ensure t)
  (use-package quelpa-use-package
    :ensure t)
#+end_src
* Minor Conveniences
#+begin_src emacs-lisp :tangle yes
  ;; Use y or n instead of yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Miscellaneous Shortcuts
  (global-set-key (kbd "C-c C-x c") 'comment-region)
  (global-set-key (kbd "C-c C-x u") 'uncomment-region)
  (global-set-key (kbd "M-s M-s") 'shell-script-mode)
  (global-set-key (kbd "M-s RET") 'ansi-term)
  (global-set-key (kbd "C-x t") 'transpose-frame)
  (global-set-key (kbd "C-x c") 'compile)
  (global-set-key (kbd "C-x p") (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "C-x O") 'next-multiframe-window)
  (global-set-key (kbd "C-c C-x k") 'kill-emacs)
  (global-set-key [f8] 'neotree-toggle)
  (global-set-key (kbd "C-x B") 'ibuffer)

  (define-key emacs-lisp-mode-map (kbd "C-c C-e") 'eval-region)
  (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)
#+end_src
** Multi-Cursors Mode
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-x m") 'mc/edit-lines))
#+end_src
* Utilities
** Helm
[[https://emacs-helm.github.io/helm/][Helm]] is an incremental completion framework for improving the file and directory navigation.
#+begin_src emacs-lisp :tangle yes
  (use-package helm
    :bind (("C-c h" . helm-command-prefix)
	   ("M-x" . helm-M-x)
	   ("C-x b" . helm-mini)
	   ("C-x C-b" . helm-buffers-list)
	   ("C-x C-f" . helm-find-files)
	   :map helm-find-files-map
	   ("\t" . helm-execute-persistent-action)
	   :map helm-map
	   ("C-i" . helm-execute-persistent-action)
	   ("C-z" . helm-select-action))
    :config (setq
	     helm-split-window-inside-p t
	     helm-move-to-line-cycle-in-source t
	     helm-ff-search-library-in-sexp t
	     helm-scroll-amount 8
	     helm-ff-file-name-history-use-recentf t
	     helm-semantic-fuzzy-match t
	     helm-imenu-fuzzy-match t
	     helm-echo-input-in-header-line t
	     helm-autoresize-max-height 0
	     helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (helm-mode 1)

    (defun my//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	(overlay-put ov 'window (selected-window))
	(overlay-put ov 'face
		     (let ((bg-color (face-background 'default nil)))
		       `(:background ,bg-color :foreground ,bg-color)))
	(setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook
	    'my//helm-hide-minibuffer-maybe))

  (use-package helm-ls-git)
  (use-package helm-swoop)
#+end_src
** Magit
[[https://emacs-helm.github.io/helm/][Magit]] is a "git porcelai", i.e., a git interface in emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :bind (("M-g M-s" . magit-status)
	   ("M-g M-c" . magit-checkout)))
#+end_src
** Yasnippet
[[https://github.com/joaotavora/yasnippet][Yasnippet]] is a template expansion framework in emacs. It defines convenient templates that can get expanded.
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :config (yas-global-mode 1)
    (setq yas-indent-line 'fixed)
    (advice-add 'yas--auto-fill-wrapper :override #'ignore))

  (use-package yasnippet-snippets)
  (use-package yasnippet-capf)
#+end_src
** Iedit
[[https://github.com/victorhge/iedit][Iedit]] allows editing multiple occurrences of a string in a buffer.
#+begin_src emacs-lisp :tangle yes
(use-package iedit)
#+end_src
** Company Mode
[[http://company-mode.github.io/][Company]] is a completion framework in emacs. We'll set this up with each IDE we install.
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode)
    ;; (setq company-minimum-prefix-length 1)
    )
  (use-package company-quickhelp
    :hook ((company-mode . company-quickhelp-mode))
    :config (setq company-quickhelp-color-background "black"))
#+end_src
** Outline
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html][Outline]] is an emacs minor mode that allows for code folding.
#+begin_src emacs-lisp :tangle yes
  (use-package outline
    :bind (:map outline-mode-map
		("C-<tab>" . outline-cycle)
		("C-<iso-lefttab>" . outline-cycle-buffer)))
#+end_src
** Dired+
#+begin_src emacs-lisp :tangle yes
  (use-package dired+
    :load-path "~/.emacs.d/locpacks/dired+")
#+end_src
** Dired subtree
#+begin_src emacs-lisp :tangle yes
  (use-package dired-subtree
    :hook ((dired-mode . dired-hide-details-mode)
           (dired-mode . auto-revert-mode))
    :bind (:map dired-mode-map
                ("C-j" . dired-subtree-toggle))
    )
  ;; C-x C-q is wdired mode
#+end_src
** Winum mode
This assigns a number to each window.
For quickly switching to window "n", just use =C-x w <n>=, where =<n>= is the window number.
Very useful for multi monitor, multi frame workflow.
#+begin_src emacs-lisp :tangle yes
  (use-package winum
    :config (winum-mode))
#+end_src
** EAT
EAT stands for "Emulate A Terminal" and is the best emacs terminal emulator.
#+begin_src emacs-lisp :tangle yes
  (quelpa '(eat :fetcher git
                :url "https://codeberg.org/akib/emacs-eat"
                :files ("*.el" ("term" "term/*.el") "*.texi"
                        "*.ti" ("terminfo/e" "terminfo/e/*")
                        ("terminfo/65" "terminfo/65/*")
                        ("integration" "integration/*")
                        (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

* Org-mode
Org mode is Emacs' own markdown environment. It's extremely powerful.
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c b" . org-iswitchb)
	   ("C-c o" . org-indent-mode)
	   :map org-mode-map
	   ("C-c C-b" . org-beamer-select-environment)
	   ("<f9>" . org-babel-execute-src-block-maybe)
	   )
    :config (setq org-log-done 'time
		  org-log-done 'note
		  org-startup-folded 'show2levels
		  org-stuck-projects
		  '("+PROJECT/-MAYBE-DONE" ("TODO" "STARTED") nil "\\<IGNORE\\>")
		  org-clock-persist 'history
		  org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
		  org-ellipsis "↴"
		  org-cite-csl-styles-dir "~/Zotero/styles/")
    ;; ▼, ↴, ⬎, ⤷, ⋱, ⤵
    (org-clock-persistence-insinuate)
    (org-babel-do-load-languages 'org-babel-load-languages
				 '((emacs-lisp . t)
				   (python . t)
				   (maxima . t)
				   (octave . t)
				   (matlab . t)))
    )

  (use-package org-special-block-extras
    :hook ((org-mode . org-special-block-extras-mode))
    )
  (use-package org-bullets
    :hook ((org-mode . (lambda () (org-bullets-mode t))))
    )

  (use-package ov)
  (use-package org-colored-text
    :load-path "~/.emacs.d/locpacks/org-colored-text"
    :config (org-link-set-parameters
	     "color"
	     (lambda (path)
	       "No follow action.")
	     (lambda (color description backend)
	       (cond
		((eq backend 'latex)                  ; added by TL
		 (format "{\\color{%s}%s}" color description)) ; added by TL
		((eq backend 'html)
		 (let ((rgb (assoc color color-name-rgb-alist))
		       r g b)
		   (if rgb
		       (progn
			 (setq r (* 255 (/ (nth 1 rgb) 65535.0))
			       g (* 255 (/ (nth 2 rgb) 65535.0))
			       b (* 255 (/ (nth 3 rgb) 65535.0)))
			 (format "<span style=\"color: rgb(%s,%s,%s)\">%s</span>"
				 (truncate r) (truncate g) (truncate b)
				 (or description color)))
		     (format "No Color RGB for %s" color))))))))

  ;; oer-reveal
  (use-package oer-reveal)

  (use-package laas
    :hook ((latex-mode . laas-mode)
           (tex-mode . laas-mode)
           (org-mode . laas-mode))
    :config (aas-global-mode)
    (aas-set-snippets 'laas-mode
      :cond #'laas-object-on-left-condition
      "tcr" (lambda () (interactive) (laas-wrap-previous-object "textcolor{red}")))
    ) 
#+end_src

#+RESULTS:
| laas-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (closure (t) nil (font-lock-add-keywords nil '((next-color-link (0 'org-link t))) t)) | (lambda nil (org-bullets-mode t)) | org-special-block-extras-mode | org-clock-load | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Org-Roam
[[https://www.orgroam.com/][Org-Roam]] is based on the Zettelkasten note keeping technique, helping you thoughts and ideas.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :init (setq org-roam-v2-ack t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ;; ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point))
    :config
    (setq org-roam-directory (file-truename "~/org-roam"))
    (org-roam-db-autosync-mode)
    )

  (require 'org-roam-node)

  (use-package escalator
    :quelpa (escalator :fetcher github
		       :repo "ag91/escalator")
    :bind (("C-c n f" . escalator-helm-org-roam))
    )

  ;; Get Agenda to Work
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
	    (seq-filter
	     (my/org-roam-filter-by-tag tag-name)
	     (org-roam-node-list))))

  ;; (defun my/org-roam-refresh-agenda-list ()
  ;;   (interactive)
  ;;   (setq org-agenda-files (append
  ;; 			  (my/org-roam-list-notes-by-tag "Project")
  ;; 			  (my/org-roam-list-notes-by-tag "Life"))))

  ;; Make org-agenda work with non org-roam files also
  (defun my/org-roam-refresh-agenda-list ()
      (interactive)
      (setq org-agenda-files (delete-dups
			      (append org-agenda-files
				      (my/org-roam-list-notes-by-tag "Project")
				      (my/org-roam-list-notes-by-tag "Life")))))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  ;; Find by tags
  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
	(add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	:unnarrowed t))))

  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)

  ;; Capture task directly into project
  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
			      nil
			      (my/org-roam-filter-by-tag "Project"))
p		       :templates '(("p" "project" plain "* TODO %?"
				     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
							    "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
							    ("Tasks"))))))

  (global-set-key (kbd "C-c n t") #'my/org-roam-capture-task)
#+end_src
** Org-tree-slide
[[https://github.com/takaxp/org-tree-slide][org-tree-slide]] is a very nice presentation minor mode for presentations with org-mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-tree-slide)
#+end_src
** Org-Capute
[[https://orgmode.org/manual/Capture.html][Org Capture]] is a package to easily store notes with little interruption of work flow
#+begin_src emacs-lisp :tangle yes
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (defvar org-local-notes-file)

  (defun my/org-local-get-target ()
    (if (boundp 'org-local-notes-file)
        (expand-file-name org-local-notes-file)
      (if (y-or-n-p "A local org note doesn't exist. Create/choose one? ")
          (progn
            (add-dir-local-variable
             nil 'org-local-notes-file
             (read-file-name "Create/choose local org notes file:"))
            (save-buffer) (kill-buffer)
            (hack-dir-local-variables-non-file-buffer)
            (when (y-or-n-p "Add it to global agenda?")
              (add-to-list 'org-agenda-files org-local-notes-file))
            org-local-notes-file)
        org-default-notes-file)))

  ;; set variable org-local-notes-file locally
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/notes.org" "Tasks")
           "* TODO %?\n Dated: %u\n Location: %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  Location: %a")
          ("l" "Local Tasks" entry (file+headline my/org-local-get-target
                                                  "Local")
           "* TODO %?\n Dated: %u\n Location: %a")
          ))
#+end_src
* Integrated Development Environments
** Latex
It is necessary to have a latex installation (Texlive is recommended, but MikTeX should also work).
Also install [[https://mg.readthedocs.io/latexmk.html][latexmk]] for building.
*** AucTeX, RefTeX, and company-auctex
[[https://www.gnu.org/software/auctex/][AucTeX]] is an emacs package for writing TeX documents.
[[https://www.gnu.org/software/auctex/reftex.html][RefTeX]] is a package that manages references, labels, citations, etc.
[[https://github.com/alexeyr/company-auctex][Company-auctex]] is a company backend for auctex.
#+begin_src emacs-lisp :tangle yes
  (use-package auctex
    :hook ((TeX-mode . auto-fill-mode)
           (TeX-mode . auto-revert-mode)
           (LaTeX-mode . visual-line-mode)
           (LaTeX-mode . LaTeX-math-mode)
           (LaTeX-mode . prettify-symbols-mode)
           (LaTeX-mode . reftex-mode)
           (doc-view-mode . auto-revert-mode))
    :config (defvar preview-default-preamble)
    (eval-after-load "preview"
      '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
    )

  (use-package auctex-latexmk
    :config (setq LaTeX-command "latex --synctex=1"
                  LaTeX-section-label (quote
                                       (("part" . "part:")
                                        ("chapter" . "chap:")
                                        ("section" . "sec:")
                                        ("subsection" . "ssec:")
                                        ("subsubsection" . "sssec:")))
                  TeX-auto-save t TeX-parse-self t)
    (setq-default TeX-master nil)
    (auctex-latexmk-setup))

  (setq LaTeX-includegraphics-read-file 'LaTeX-includegraphics-read-file-relative
        reftex-plug-into-AUCTeX t
        reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))

  (use-package company-auctex
      :config (company-auctex-init))
#+end_src
*** Pdf-Tools
Pdf-Tools is a nice frontend for viewing pdfs in emacs.
Ensure you install the following first
#+begin_src bash
  # Almalinux
  yum install autoconf automake gcc libpng-devel make pkgconfig poppler-devel poppler-glib-devel zlib-devel

  # Ubuntu
  apt install autoconf automake gcc libpng-devel make pkgconfig poppler-devel poppler-glib-devel zlib-devel
#+end_src
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
      :hook ((pdf-view-mode . (lambda () (display-line-numbers-mode -1))))
      )

  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)

  ;; Make pdf-tools default viewer for TeX compile
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")) TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'TeX-mode 'pdf-sync-minor-mode)
  (define-key TeX-mode-map (kbd "C-c M-v") 'pdf-sync-display-pdf)
  (define-key TeX-mode-map (kbd "C-c v") 'pdf-sync-forward-search)
#+end_src
*** Custom Latex Navigation
Add code which helps to navigate through tex files
#+begin_src emacs-lisp :tangle yes
  (setq my/latex-section-head-string "^\s*\\\\section")

  (defun my/latex-go-up-section ()
    "Go up a section"
    (interactive)
    (or (re-search-backward my/latex-section-head-string (point-min) t) (goto-char (point-min)))
    (previous-line))

  (defun my/latex-go-down-section ()
    "Go down one section"
    (interactive)
    (or (re-search-forward my/latex-section-head-string (point-max) t) (goto-char (point-max)))
    (next-line)
    (next-line))

  (define-key LaTeX-mode-map (kbd "M-v") 'my/latex-go-up-section)
  (define-key LaTeX-mode-map (kbd "C-v") 'my/latex-go-down-section)
#+end_src
*** CART
[[https://github.com/Nidish96/cart.el][cart.el]] is an emacs package that allows you to enter calibrated coordinate-based tikz graphics elements into latex documents.
Quite useful for beamer presentations.
#+begin_src emacs-lisp :tangle yes
  (use-package cart
    :quelpa (cart :fetcher github
		  :repo "Nidish96/cart.el")
    :hook ((LaTeX-mode-hook . cart-mode)))
#+end_src
*** Auto activating Snippets
#+begin_src emacs-lisp :tangle yes
  (use-package laas
    :hook (LaTeX-mode . laas-mode)
    :config
    (aas-set-snippets 'laas-mode
      :cond #'texmathp
      "supp" "\\supp"
      "On" "\\mathcal{O}(n)"
      "O1" "\\mathcal{O}(1)"
      "Olog" "\\mathcal{O}(\\log n)"
      "Olon" "\\mathcal{O}(n\\log n)"
      ;; bind to functions
      "Sum" (lambda () (interactive)
              (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
      "Span" (lambda () (interactive)
               (yas-expand-snippet "\\Span($1)$0"))
      ;; add accent snippets
      :cond #'laas-object-on-left-condition
      "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))
      "'B" (lambda () (interactive) (laas-wrap-previous-object "mathbb"))
      "'o" (lambda () (interactive) (laas-wrap-previous-object "operatorname")))
    (setq laas-enable-auto-space nil)
    )

  (use-package lazytab
    :straight (lazytab :type git :host github :repo "Nidish96/lazytab")
    ;; :quelpa ((lazytab :fetcher github
    ;;                   :repo "Nidish96/lazytab")
    ;;          :upgrade t)
    :bind (("C-c t" . 'lazytab-orgtbl-replace)
           ;; :map LaTeX-mode-map
           ;; ("<tab>" . (lambda () (interactive)
           ;;              (let ((p0 (point)))
           ;;                (unless (lazytab-org-table-next-field-maybe)
           ;;                  (let ((p1 (point)))
           ;;                    (goto-char p0)
           ;;                    (unless (yas-expand)
           ;;                      (goto-char p1)))))))
           )
    :hook ((LaTeX-mode . orgtbl-mode)
           (LaTeX-mode . lazytab-mode))
    )

  ;; indent-for-tab-command, lazytab-org-table-next-field-maybe
  ;; (quelpa '(lazytab :fetcher github
  ;; 		  :repo "Nidish96/lazytab"))
#+end_src
** Matlab
[[https://matlab-emacs.sourceforge.net/index.shtml][Matlab-mode]] is an emacs mode for editing & running matlab scripts. You can launch an inferior shell, do debugging, etc.
I've setup shortcuts to be identical to what we have with the matlab gui.
#+begin_src emacs-lisp :tangle yes
  (use-package matlab
    :ensure matlab-mode
    :load-path "/home/nidish/DEV/nidish96-matlab-emacs"
    :init
    (setq matlab-purpose-loaded-once nil)
    :bind (:map matlab-mode-map
                ("C-c C-b" . (lambda () (interactive)
                               (save-excursion (matlab-shell-run-cell))
                               (if (re-search-forward "^\s*\^L*%%" nil t)
                                   (forward-line) (forward-page))))
                ("C-<return>" . matlab-shell-run-cell)
                ("C-M-<return>" . matlab-shell-run-region-or-line)
                ("M-." . my-matlab-shell-locate-this-fcn)
                ("C-c <return>" . (lambda () "Run Buffer"
                                    (interactive)
                                    (save-buffer)
                                    (matlab-shell-send-command (file-name-base (buffer-file-name)))))
                ("C-c C-m" . (lambda () "Run Buffer"
                               (interactive)
                               (save-buffer)
                               (matlab-shell-send-command (file-name-base (buffer-file-name)))))
                ("C-v" . (lambda ()
                           (interactive)
                           (unless (re-search-forward "^\s*\^L%%" nil t)
                             (forward-page))
                           (forward-line)))
                ("M-v" . (lambda ()
                           (interactive)
                           (unless (re-search-backward "^\s*\^L%%" nil t)
                             (backward-page))
                           (forward-line -1)))
                ("C-c C-r" . my-matlab-shell-run-region-or-line)
                ("M-p" . (lambda () (interactive) (matlab-backward-sexp)))
                ("M-n" . (lambda () (interactive) (matlab-forward-sexp)))
                ("C-c C-p" . #'matlab-shell)
                ("C-<tab>" . ts-fold-toggle)
                ("C-M-f" . (lambda () (interactive)
                             (let* ((nd (tree-sitter-node-at-pos))
                                    (ndp (tsc-get-parent nd)))
                               (when (eq (point) (tsc-node-start-position ndp))
                                 (setq nd ndp))
                               (if (or (eq (tsc-node-type nd) 'source_file)
                                       (not (eq (point) (tsc-node-start-position nd))))
                                   (forward-sexp)
                                 (goto-char (tsc-node-end-position nd))))))
                ("C-M-b" . (lambda () (interactive)
                             (let* ((nd (save-excursion (backward-char)
                                                        (tree-sitter-node-at-pos)))
                                    (ndp (tsc-get-parent nd)))
                               (when (eq (point) (tsc-node-end-position ndp))
                                 (setq nd ndp))
                               (if (or (eq (tsc-node-type nd) 'source_file)
                                       (not (eq (point) (tsc-node-end-position nd))))
                                   (backward-sexp)
                                 (goto-char (tsc-node-start-position nd))))))
                ("C-c d" . (lambda () (interactive) (matlab-shell-send-command
                                                     (concat "help "
                                                             (matlab-read-word-at-point)))))

                )
    :config
    (defun my-matlab-shell-locate-this-fcn (&optional fcn)
      "Run \"which FCN\" in the `matlab-shell', then open the file."
      (interactive)
      (let* ((fcn (or fcn (matlab-read-word-at-point)))
             (file (matlab-shell-which-fcn fcn)))
        (if file
            (find-file (car file))
          (error "Command which('%s') returned empty" fcn))))
    (defun my-matlab-shell-run-region-or-line ()
      "Send region or line as command to matlab shell"
      (interactive)
      (let ((p0) (p1))
        (if (region-active-p)
            (progn
              (setq p0 (region-beginning))
              (setq p1 (region-end)))
          (setq p0 (line-beginning-position))
          (setq p1 (line-end-position)))
        (matlab-shell-send-command (buffer-substring p0 p1))))
    (setq matlab-file-font-lock-keywords matlab-file-really-gaudy-font-lock-keywords)
    :hook ((matlab-mode . tree-sitter-hl-mode)
           (find-file . (lambda ()
                          (when (and (not matlab-purpose-loaded-once)
                                     (eq major-mode 'matlab-mode)
                                     (y-or-n-p "Load matlab purpose layout?"))
                            (purpose-mode)
                            (setq matlab-purpose-loaded-once t)
                            (let ((dirname (file-name-directory buffer-file-name))
                                  (buffname (buffer-file-name)))
                              (purpose-load-window-layout "matlab")
                              (other-window 2) (dired dirname)
                              (other-window -2)
                              (when (and (not (matlab-shell-active-p))
                                         (y-or-n-p "Start Matlab?"))
                                (other-window 3)
                                (purpose-toggle-window-purpose-dedicated)
                                (find-file buffname) (matlab-shell)
                                (purpose-toggle-window-purpose-dedicated))
                              (other-window 1) (find-file buffname))))))
    )

  (add-hook 'matlab-mode-hook
            (defun baba-outline-matlab ()
              "Fold definitions in Matlab."
              (setq outline-regexp
                    (rx (or
                         (group
                          (group (* space))
                          bow
                          (or "classdef" "function" "properties" "methods"
                              "for" "if" "switch" "case" "while" "end" "%%")
                          eow))))
              ;; (baba/outline-overview)
              ))


  (use-package outline
    :bind (:map outline-mode-map
                ("C-<tab>" . outline-cycle)
                ("C-<iso-lefttab>" . outline-cycle-buffer)))
  (add-hook 'outline-minor-mode-hook
            (defun baba/outline-overview ()
              "Show only outline headings."
              (outline-show-all)
              (outline-hide-body)
              ))

  (set-display-table-slot
   standard-display-table
   'selective-display
   (let ((face-offset (* (face-id 'shadow) (ash 1 22))))
     (vconcat (mapcar (lambda (c) (+ face-offset c)) " +"))))
#+end_src
** Python
You need to install the following from pip:
+ 'python-language-server[all]'
+ python-lsp-server
+ debugpy
  Ensure "/home/nbalaji/.local/bin" is added to path.
#+begin_src emacs-lisp :tangle yes
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :bind (:map python-mode-map
                ("C-<tab>" . yas-expand))
    )
  (use-package flycheck)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package lsp-mode
    :config
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)))
    :hook
    ((python-mode . lsp)))

  (use-package lsp-pyright)

  ;; Custom Stuff
  (setq my/python-block-head-string "^\s*####")

  ;; Custom stuff for python blocks
  (defun my/python-run-block ()
    "Run the current block"
    (interactive)
    (let ((p0 (save-excursion (or (re-search-backward my/python-block-head-string (point-min) t) (point-min))))
          (p1 (save-excursion (or (re-search-forward my/python-block-head-string (point-max) t) (point-max)))))
      (python-shell-send-region p0 p1)
      (goto-char p1) (forward-line))
    )

  (define-key python-mode-map (kbd "C-c C-b") 'my/python-run-block)

  (defun my/python-go-up-block ()
    "Go up a block"
    (interactive)
    (or (re-search-backward my/python-block-head-string (point-min) t)
        (scroll-up-command))
    (forward-line -1))

  (defun my/python-go-down-block ()
    "Go down one block"
    (interactive)
    (or (re-search-forward my/python-block-head-string (point-max) t)
        (scroll-down-command))
    (forward-line))

  (define-key python-mode-map (kbd "M-v") 'my/python-go-up-block)
  (define-key python-mode-map (kbd "C-v") 'my/python-go-down-block) 
#+end_src
** RealGUD
[[https://github.com/realgud/realgud][RealGUD]] is an emacs "frontend" for debugging. It works with all the classic tools (Python, C/C++, FORTRAN, etc.).
MATLAB debugging is built into matlab-mode above. 
#+begin_src emacs-lisp :tangle yes
  (use-package realgud)
#+end_src
** C/C++
#+begin_src emacs-lisp :tangle yes
  (use-package cc-mode
    :bind (:map c-mode-map
	   ("C-c RET" . compile)
	   :map c++-mode-map
	   ("C-c RET" . compile)))
#+end_src
** Highlight indent guides
#+begin_src emacs-lisp :tangle yes
  (use-package indent-guide
    :config
    ;; (set-face-background 'indent-guide-face "gray")
    :hook (prog-mode . indent-guide-mode))

  (use-package highlight-indentation
    :hook (prog-mode . highlight-indentation-mode))
#+end_src
* Miscellanies
** OpenFOAM
[[https://github.com/ralph-schleicher/emacs-openfoam][emacs-openfoam]] is a package for editing openfoam files.
#+begin_src emacs-lisp :tangle yes
  (use-package openfoam)
#+end_src
** CSV Editing
#+begin_src emacs-lisp :tangle yes
  (use-package csv-mode
    :config
    (defun csv-highlight (&optional separator)
      (interactive (list (when current-prefix-arg (read-char "Separator: "))))
      (font-lock-mode 1)
      (let* ((separator (or separator ?\,))
	     (n (count-matches (string separator) (pos-bol) (pos-eol)))
	     (colors (cl-loop for i from 0 to 1.0 by (/ 2.0 n)
			   collect (apply #'color-rgb-to-hex 
					  (color-hsl-to-rgb i 0.3 0.5)))))
	(cl-loop for i from 2 to n by 2 
	      for c in colors
	      for r = (format "^\\([^%c\n]+%c\\)\\{%d\\}" separator separator i)
	      do (font-lock-add-keywords nil `((,r (1 '(face (:foreground ,c)))))))))
    :hook ((csv-mode . csv-highlight)
	   (csv-mode . csv-align-mode)
	   (csv-mode . (lambda () (interactive) (toggle-truncate-lines nil)))
	   )
    )
#+end_src
** Rainbow Delimiters Mode
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Init File Stuff
** Tangle init org file
#+begin_src emacs-lisp :tangle yes
  (defun tangle-init ()
    "If the current buffer is =config.org= the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "config.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "config.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src
** Open init file by default
#+begin_src emacs-lisp :tangle yes
  (setq startdir default-directory)
  (find-file "~/.emacs.d/config.org")
  (dired startdir)
#+end_src

* Bug fixes
** Prevent company from completing numbers
#+begin_src emacs-lisp :tangle yes
  (push (apply-partially #'cl-remove-if
                         (lambda (c)
                           (or (string-match-p "[^\x00-\x7F]+" c)
                               (string-match-p "[0-9]+" c)
                               (if (equal major-mode "org")
                                   (>= (length c) 15)))))
        company-transformers)

#+end_src

* Some inspiring Emacs quotes ;-)
** Neal Stephenson, In the Beginning was the Command Line (1998)
#+BEGIN_QUOTE
Emacs outshines all other editing software in approximately the same way that
the noonday sun does the stars. It is not just bigger and brighter; it simply
makes everything else vanish.
#+END_QUOTE
** Richard Stallman
#+BEGIN_QUOTE
When large numbers of nontechnical workers are using a programmable
editor, they will be tempted constantly to begin programming in the
course of their day-to-day lives. This should contribute greatly to
computer literacy, especially because many of the people thus exposed
will be secretaries taught by society that they are incapable of doing
mathematics, and unable to imagine for a moment that they can learn to
program. But that won't stop them from learning it if they don't know
that it is programming that they are learning!
#+END_QUOTE
#+BEGIN_QUOTE
EMACS could not have been reached by a process of careful design,
because such processes arrive only at goals which are visible at
the outset, and whose desirability is established on the bottom
line at the outset. Neither I nor anyone else visualized an
extensible editor until I had made one, nor appreciated its value
until he had experienced it. EMACS exists because I felt free to
make individually useful small improvements on a path whose end
was not in sight.
#+END_QUOTE
